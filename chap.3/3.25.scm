(define (make-table)
  (let ((table (list '*table*)))
    (define (assoc key records)
      (cond ((null? records) false)
            ((equal? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    (define (lookup keys)
      (define (lookup-iter keys tables)
        (let ((record (assoc (car keys) (cdr tables))))
          (if record
              (cond ((null? (cdr keys))
                     (let ((value-pair (assoc '() (cdr record))))
                       (if value-pair
                           (cdr value-pair)
                           false)))
                    (else (lookup-iter (cdr keys) record)))
              false)))
      (lookup-iter keys table))
    (define (insert! keys value)
      (define (insert-iter! keys tables value)
        (let ((sub-table (assoc (car keys) (cdr tables))))
          (if sub-table
              (cond ((null? (cdr keys)) (set-cdr! sub-table value))
                    (else (insert-iter! (cdr keys) sub-table value)))
              (set-cdr! tables 
                        (cons (build-table keys value) (cdr tables))))))
      (define (build-table keys value)
        (if (null? (cdr keys))
            (cons (car keys) (cons (cons '() value) '()))
            (cons (car keys) 
                  (cons (build-table (cdr keys) value) '()))))
      (insert-iter! keys table value))
    (define (export-table) table)
    (define (dispatch m)
      (cond ((eq? m 'insert) insert!)
            ((eq? m 'lookup) lookup)
            ((eq? m 'export) (export-table))))
    dispatch))

(define t (make-table))
(define (lookup keys) ((t 'lookup) keys))
(define (insert keys value) ((t 'insert) keys value))
(define (export) (t 'export))

; (lookup (list 'a))
; (insert (list 'a) 1)
; (insert (list 'a 'b) 2)
; (insert (list 'b 'c 'c) 4)
; (lookup (list 'a))
; (lookup (list 'a 'b))
; (lookup (list 'c))
