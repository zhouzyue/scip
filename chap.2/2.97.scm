(define (reduce-terms n d)
  (let ((g (gcd-terms n d)))
    (let ((o1 (max (order (first-term n))
                   (order (first-term d))))
          (o2 (order (first-term g))))
      (let ((factor (adjoin-term (make-term 0 (expt (coeff (first-term g)) (+ 1 (- o1 o2))))
                                 (the-empty-termlist))))
        (let ((nn (car (div-terms (mul-terms n factor) g)))
              (dd (car (div-terms (mul-terms d factor) g))))
          (let ((gcd-coeffs (apply gcd (map coeff 
                                            (append (n d))))))
            (let ((gcd-terms (adjoin-term (make-term 0 gcd-coeffs)
                                          (the-empty-termlist))))
              (list (car (div-terms nn gcd-terms))
                    (car (div-terms dd gcd-terms))))))))))

(define (reduce-poly a b)
  (if (same-variable? (variable a) (variable b))
      (let ((reduced (reduce-terms (term-list a) (term-list b)))
            (v (variable a)))
        (list (make-poly v (car reduced))
              (make-poly v (cadr reduced))))
      (error "diffrent variables")))
