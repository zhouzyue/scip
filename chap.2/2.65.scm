(define (union-set set1 set2)
  (define (inner set1 set2)
    (cond ((null? set1) set2)
          ((null? set2) set1)
          ((< (car set1) (car set2)) (cons (car set1) (inner (cdr set1) set2)))
          ((= (car set1) (car set2)) (inner (cdr set1) set2))
          (else (cons (car set2) (inner set1 (cdr set2))))))
  (list->tree (inner (tree->list2 set1)
                     (tree->list2 set2))))

(define (intersection-set set1 set2)
  (define (inner set1 set2)
    (cond ((or (null? set1) (null? set2)) '())
          ((= (car set1) (car set2)) (cons (car set1) (inner (cdr set1) (cdr set2))))
          ((< (car set1) (car set2)) (inner (cdr set1) set2))
          (else (inner set1 (cdr set2)))))
  (list->tree (inner (tree->list2 set1)
                     (tree-list2 set2))))
