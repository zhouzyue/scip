(define (count-pairs x)
  (let ((c '()))
    (define (counted? n counted)
      (cond ((null? counted) false)
            ((eq? (car counted) n) true)
            (else (counted? n (cdr counted)))))
    (define (iter x)
      (cond ((not (pair? x)) 0)
            ((counted? x c) 0)
            (else (begin (set! c (cons x c))
                         (+ (iter (car x))
                            (iter (cdr x))
                            1)))))
    (iter x)))

